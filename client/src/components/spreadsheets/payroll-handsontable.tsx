import React, { useEffect, useRef, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

interface PayrollHandsontableProps {
  selectedMonth: number;
  selectedYear: number;
}

const mockSalaryData = [
  {
    id: 1,
    name: "Ph·∫°m Qu√¢n L√Ω",
    position: "Qu·∫£n L√Ω",
    workDays: 25,
    basicSalary: 15000000,
    productionSalary: 15000000,
    bonusRevenue: 0,
    bonusService: 0,
    allowance: 0,
    penalty: 0,
    advance: 2000000,
    actualReceived: 0,
    totalSalary: 28000000,
    managementBonus: 6435000,
    finalTotal: 9300000
  },
  {
    id: 2,
    name: "V≈© Th·ªã Ng√¢n",
    position: "Qu·∫£n L√Ω CSS Team",
    workDays: 25,
    basicSalary: 5000000,
    productionSalary: 5000000,
    bonusRevenue: 0,
    bonusService: 0,
    allowance: 0,
    penalty: 0,
    advance: 0,
    actualReceived: 0,
    totalSalary: 10000000,
    managementBonus: 5000000,
    finalTotal: 5000000
  },
  {
    id: 3,
    name: "L∆∞∆°ng Thu Trang",
    position: "MKT",
    workDays: 25,
    basicSalary: 4500000,
    productionSalary: 4500000,
    bonusRevenue: 0,
    bonusService: 0,
    allowance: 0,
    penalty: 0,
    advance: 0,
    actualReceived: 0,
    totalSalary: 9000000,
    managementBonus: 4500000,
    finalTotal: 4500000
  },
  {
    id: 4,
    name: "Ph·∫°m Vi·ªát Lu√¢n",
    position: "Ads Team",
    workDays: 25,
    basicSalary: 4500000,
    productionSalary: 4500000,
    bonusRevenue: 0,
    bonusService: 0,
    allowance: 0,
    penalty: 0,
    advance: 0,
    actualReceived: 0,
    totalSalary: 9000000,
    managementBonus: 4500000,
    finalTotal: 4500000
  },
  {
    id: 5,
    name: "L∆∞∆°ng Th√†nh ƒê·∫°t",
    position: "MKT",
    workDays: 25,
    basicSalary: 4500000,
    productionSalary: 4500000,
    bonusRevenue: 600000,
    bonusService: 1200000,
    allowance: 0,
    penalty: 0,
    advance: 2000000,
    actualReceived: 0,
    totalSalary: 8800000,
    managementBonus: 6400000,
    finalTotal: 6400000
  }
];

const mockBonusData = [
  { name: "L√ù NG·ªåC ANH", percentage: 7, bonus: 3227982 },
  { name: "NGUY·ªÑN TH·ªä V√ÇN ANH", percentage: 7, bonus: 3227982 },
  { name: "L∆Ø∆†NG TH√ÄNH ƒê·∫†T", percentage: 50, bonus: 23057015 },
  { name: "L∆Ø∆†NG THU TRANG", percentage: 36, bonus: 16601051 }
];

const mockAgcSalaryData = [
  {
    id: 1,
    employeeName: "Nguy·ªÖn VƒÉn A",
    employeeCode: "NV001",
    clientName: "Kh√°ch h√†ng ABC",
    clientRevenue: 5000000,
    bonusPercentage: 3,
    agcSalary: 150000
  },
  {
    id: 2,
    employeeName: "Tr·∫ßn Th·ªã B",
    employeeCode: "NV002",
    clientName: "Kh√°ch h√†ng XYZ",
    clientRevenue: 8000000,
    bonusPercentage: 2.5,
    agcSalary: 200000
  },
  {
    id: 3,
    employeeName: "Ph·∫°m VƒÉn C",
    employeeCode: "NV003",
    clientName: "Kh√°ch h√†ng DEF",
    clientRevenue: 12000000,
    bonusPercentage: 2,
    agcSalary: 240000
  },
  {
    id: 4,
    employeeName: "L√™ Th·ªã D",
    employeeCode: "NV004",
    clientName: "Kh√°ch h√†ng GHI",
    clientRevenue: 6500000,
    bonusPercentage: 2.8,
    agcSalary: 182000
  },
  {
    id: 5,
    employeeName: "Ho√†ng VƒÉn E",
    employeeCode: "NV005",
    clientName: "Kh√°ch h√†ng JKL",
    clientRevenue: 4200000,
    bonusPercentage: 3.5,
    agcSalary: 147000
  }
];

export function PayrollHandsontable({ selectedMonth, selectedYear }: PayrollHandsontableProps) {
  const salaryHotRef = useRef<Handsontable | null>(null);
  const salaryContainerRef = useRef<HTMLDivElement>(null);
  const bonusHotRef = useRef<Handsontable | null>(null);
  const bonusContainerRef = useRef<HTMLDivElement>(null);
  const agcHotRef = useRef<Handsontable | null>(null);
  const agcContainerRef = useRef<HTMLDivElement>(null);
  
  // State to track active tab
  const [activeTab, setActiveTab] = useState("salary-summary");
  
  // Use useRef to track which tables have been initialized (persists across re-renders)
  const initializedTables = useRef<Set<string>>(new Set());
  
  // Debug logging
  console.log('üîç PayrollHandsontable render - activeTab:', activeTab);
  console.log('üìä Mock salary data length:', mockSalaryData?.length);
  console.log('üìä Mock bonus data length:', mockBonusData?.length);
  console.log('üìä Mock AGC data length:', mockAgcSalaryData?.length);

  // Format currency
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('vi-VN').format(value);
  };

  // Initialize specific table when its tab becomes active
  const initializeSalaryTable = () => {
    if (!salaryContainerRef.current || salaryHotRef.current) return;

    console.log('üí∞ Initializing Salary table...');
    const salaryColumns = [
      { data: 'stt', title: 'STT', width: 40, readOnly: true },
      { data: 'name', title: 'H·ªç v√† t√™n', width: 120, readOnly: true },
      { data: 'position', title: 'Ch·ª©c v·ª•', width: 100, readOnly: true },
      { data: 'workDays', title: 'Ng√†y c√¥ng', width: 80, type: 'numeric' },
      { data: 'basicSalary', title: 'L∆∞∆°ng c∆° b·∫£n', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'productionSalary', title: 'L∆∞∆°ng s·∫£n xu·∫•t', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'bonusRevenue', title: 'Th∆∞·ªüng DT', width: 100, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'bonusService', title: 'Th∆∞·ªüng DV', width: 100, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'allowance', title: 'Ph·ª• c·∫•p', width: 100, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'penalty', title: 'Ph·∫°t', width: 80, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'advance', title: 'T·∫°m ·ª©ng', width: 100, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'totalSalary', title: 'T·ªïng l∆∞∆°ng', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' }, readOnly: true },
      { data: 'managementBonus', title: 'Th∆∞·ªüng QL', width: 100, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'finalTotal', title: 'Th·ª±c nh·∫≠n', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' }, readOnly: true }
    ];

    const salaryData = mockSalaryData.map((emp, index) => ({
      ...emp,
      stt: index + 1
    }));

    try {
      salaryHotRef.current = new Handsontable(salaryContainerRef.current, {
        data: salaryData,
        columns: salaryColumns,
        colHeaders: ['STT', 'H·ªç v√† t√™n', 'Ch·ª©c v·ª•', 'Ng√†y c√¥ng', 'L∆∞∆°ng c∆° b·∫£n', 'L∆∞∆°ng s·∫£n xu·∫•t', 'Th∆∞·ªüng DT', 'Th∆∞·ªüng DV', 'Ph·ª• c·∫•p', 'Ph·∫°t', 'T·∫°m ·ª©ng', 'T·ªïng l∆∞∆°ng', 'Th∆∞·ªüng QL', 'Th·ª±c nh·∫≠n'],
        rowHeaders: false,
        height: 300,
        licenseKey: 'non-commercial-and-evaluation',
        stretchH: 'all',
        columnSorting: true,
        contextMenu: ['copy', 'cut'],
        manualColumnResize: true,
        manualRowResize: false,
        fixedColumnsStart: 3,
        className: 'handsontable-payroll'
      });
      initializedTables.current.add('salary');
      console.log('‚úÖ Salary Handsontable initialized!');
    } catch (error) {
      console.error('‚ùå Salary Handsontable failed:', error);
    }
  };

  const initializeBonusTable = () => {
    if (!bonusContainerRef.current) {
      console.error('‚ùå BONUS: Container ref not available');
      return;
    }
    
    if (bonusHotRef.current) {
      console.log('‚ö†Ô∏è BONUS: Table already exists, skipping');
      return;
    }

    console.log('üéÅ BONUS: Starting initialization...');
    const bonusColumns = [
      { data: 'stt', title: 'STT', width: 40, readOnly: true },
      { data: 'name', title: 'T√™n nh√¢n vi√™n', width: 150, readOnly: true },
      { data: 'percentage', title: '% Th∆∞·ªüng', width: 80, type: 'numeric' },
      { data: 'bonus', title: 'Ti·ªÅn th∆∞·ªüng', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' } }
    ];

    const bonusData = mockBonusData.map((emp, index) => ({
      ...emp,
      stt: index + 1
    }));
    
    console.log('üéÅ BONUS: Data prepared, columns:', bonusColumns.length, 'rows:', bonusData.length);

    try {
      bonusHotRef.current = new Handsontable(bonusContainerRef.current, {
        data: bonusData,
        columns: bonusColumns,
        colHeaders: ['STT', 'T√™n nh√¢n vi√™n', '% Th∆∞·ªüng', 'Ti·ªÅn th∆∞·ªüng'],
        rowHeaders: false,
        height: 200,
        licenseKey: 'non-commercial-and-evaluation',
        stretchH: 'all',
        columnSorting: true,
        contextMenu: ['copy', 'cut'],
        manualColumnResize: true,
        manualRowResize: false,
        className: 'handsontable-bonus'
      });
      initializedTables.current.add('bonus');
      console.log('‚úÖ BONUS: Handsontable initialized successfully!');
      
      // Force render after a small delay
      setTimeout(() => {
        if (bonusHotRef.current) {
          bonusHotRef.current.render();
          console.log('üîÑ BONUS: Force rendered');
        }
      }, 100);
    } catch (error) {
      console.error('‚ùå BONUS: Handsontable initialization failed:', error);
    }
  };

  const initializeAgcTable = () => {
    if (!agcContainerRef.current) {
      console.error('‚ùå AGC: Container ref not available');
      return;
    }
    
    if (agcHotRef.current) {
      console.log('‚ö†Ô∏è AGC: Table already exists, skipping');
      return;
    }

    console.log('üè¢ AGC: Starting initialization...');
    const agcColumns = [
      { data: 'stt', title: 'STT', width: 50, readOnly: true },
      { data: 'employeeName', title: 'Nh√¢n vi√™n', width: 120, readOnly: false },
      { data: 'employeeCode', title: 'M√£ NV', width: 80, readOnly: false },
      { data: 'clientName', title: 'Kh√°ch h√†ng', width: 150, readOnly: false },
      { data: 'clientRevenue', title: 'Doanh thu KH', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' } },
      { data: 'bonusPercentage', title: 'T·ª∑ l·ªá %', width: 80, type: 'numeric', numericFormat: { pattern: '0.0' } },
      { data: 'agcSalary', title: 'L∆∞∆°ng DV AGC', width: 120, type: 'numeric', numericFormat: { pattern: '0,0' }, readOnly: true }
    ];

    const agcData = mockAgcSalaryData.map((emp, index) => ({
      ...emp,
      stt: index + 1
    }));
    
    console.log('üè¢ AGC: Data prepared, columns:', agcColumns.length, 'rows:', agcData.length);

    try {
      agcHotRef.current = new Handsontable(agcContainerRef.current, {
        data: agcData,
        columns: agcColumns,
        colHeaders: ['STT', 'Nh√¢n vi√™n', 'M√£ NV', 'Kh√°ch h√†ng', 'Doanh thu KH', 'T·ª∑ l·ªá %', 'L∆∞∆°ng DV AGC'],
        rowHeaders: false,
        height: 250,
        licenseKey: 'non-commercial-and-evaluation',
        stretchH: 'all',
        columnSorting: true,
        contextMenu: ['copy', 'cut'],
        manualColumnResize: true,
        manualRowResize: false,
        className: 'handsontable-agc',
        afterChange: function(changes: any, source: string) {
          if (changes && source !== 'loadData' && source !== 'calculation') {
            const hotInstance = agcHotRef.current;
            if (hotInstance) {
              changes.forEach(([row, prop, oldVal, newVal]: [number, string, any, any]) => {
                if (prop === 'clientRevenue' || prop === 'bonusPercentage') {
                  const revenue = hotInstance.getDataAtCell(row, 4) || 0;
                  const percentage = hotInstance.getDataAtCell(row, 5) || 0;
                  const calculatedSalary = Math.round((revenue * percentage) / 100);
                  hotInstance.setDataAtCell(row, 6, calculatedSalary, 'calculation');
                }
              });
            }
          }
        }
      });
      initializedTables.current.add('agc');
      console.log('‚úÖ AGC: Handsontable initialized successfully!');
      
      // Force render after a small delay
      setTimeout(() => {
        if (agcHotRef.current) {
          agcHotRef.current.render();
          console.log('üîÑ AGC: Force rendered');
        }
      }, 100);
    } catch (error) {
      console.error('‚ùå AGC: Handsontable initialization failed:', error);
    }
  };

  // Lazy initialization when tab becomes active + persistent tables
  useEffect(() => {
    console.log(`üéØ LAZY INIT: Tab ${activeTab} became active`);
    
    const timer = setTimeout(() => {
      switch (activeTab) {
        case 'salary-summary':
          if (!initializedTables.current.has('salary') && salaryContainerRef.current) {
            console.log('üí∞ LAZY: Initializing Salary table when needed...');
            initializeSalaryTable();
          } else if (salaryHotRef.current) {
            console.log('üîÑ LAZY: Re-rendering existing Salary table');
            salaryHotRef.current.render();
          }
          break;
          
        case 'revenue-bonus':
          if (!initializedTables.current.has('bonus') && bonusContainerRef.current) {
            console.log('üéÅ LAZY: Initializing Bonus table when needed...');
            initializeBonusTable();
          } else if (bonusHotRef.current) {
            console.log('üîÑ LAZY: Re-rendering existing Bonus table');
            bonusHotRef.current.render();
          }
          break;
          
        case 'agc-salary':
          if (!initializedTables.current.has('agc') && agcContainerRef.current) {
            console.log('üè¢ LAZY: Initializing AGC table when needed...');
            initializeAgcTable();
          } else if (agcHotRef.current) {
            console.log('üîÑ LAZY: Re-rendering existing AGC table');
            agcHotRef.current.render();
          }
          break;
      }
    }, 100); // Small delay to ensure DOM is fully rendered

    return () => clearTimeout(timer);
  }, [activeTab]); // Re-run when tab changes

  // Re-initialize all tables when month/year changes
  useEffect(() => {
    console.log('üìÖ Month/Year changed, clearing all tables for re-initialization');
    
    // Clean up existing tables
    if (salaryHotRef.current) {
      console.log('üóëÔ∏è Destroying existing Salary table');
      salaryHotRef.current.destroy();
      salaryHotRef.current = null;
    }
    if (bonusHotRef.current) {
      console.log('üóëÔ∏è Destroying existing Bonus table');
      bonusHotRef.current.destroy();
      bonusHotRef.current = null;
    }
    if (agcHotRef.current) {
      console.log('üóëÔ∏è Destroying existing AGC table');
      agcHotRef.current.destroy();
      agcHotRef.current = null;
    }
    
    // Reset initialization tracking
    initializedTables.current.clear();
    console.log('‚úÖ All tables cleared, ready for lazy re-initialization');
  }, [selectedMonth, selectedYear]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (salaryHotRef.current) {
        salaryHotRef.current.destroy();
        salaryHotRef.current = null;
      }
      if (bonusHotRef.current) {
        bonusHotRef.current.destroy();
        bonusHotRef.current = null;
      }
      if (agcHotRef.current) {
        agcHotRef.current.destroy();
        agcHotRef.current = null;
      }
    };
  }, []);


  return (
    <div className="space-y-6">
      <Tabs value={activeTab} onValueChange={(value) => {
        console.log('üîÑ Tab changed from', activeTab, 'to', value);
        setActiveTab(value);
      }} className="w-full">
        <TabsList className="grid grid-cols-3 lg:w-full">
          <TabsTrigger value="salary-summary">T·ªïng h·ª£p l∆∞∆°ng</TabsTrigger>
          <TabsTrigger value="revenue-bonus">Th∆∞·ªüng DT</TabsTrigger>
          <TabsTrigger value="agc-salary">L∆∞∆°ng DV AGC</TabsTrigger>
        </TabsList>

        {/* Salary Summary Tab */}
        <TabsContent value="salary-summary">
          <Card className="bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle>L∆Ø∆†NG NH√ÇN VI√äN</CardTitle>
              <CardDescription>B·∫£ng t√≠nh l∆∞∆°ng chi ti·∫øt</CardDescription>
            </CardHeader>
            <CardContent>
              <div ref={salaryContainerRef} style={{ minHeight: '300px', width: '100%' }} />
            </CardContent>
          </Card>
        </TabsContent>

        {/* Revenue Bonus Tab */}
        <TabsContent value="revenue-bonus">
          <Card className="bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle>TH∆Ø·ªûNG DOANH THU FB</CardTitle>
              <CardDescription>T√≠nh th∆∞·ªüng theo doanh thu Facebook Ads</CardDescription>
            </CardHeader>
            <CardContent>
              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <p className="text-sm text-blue-600 font-medium">T·ªïng doanh thu</p>
                  <p className="text-xl font-bold text-blue-900">10,850M VNƒê</p>
                </div>
                <div className="bg-red-50 p-4 rounded-lg">
                  <p className="text-sm text-red-600 font-medium">Chi ph√≠ ∆∞·ªõc t√≠nh</p>
                  <p className="text-xl font-bold text-red-900">1,628M VNƒê</p>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <p className="text-sm text-green-600 font-medium">Doanh thu th·ª±c</p>
                  <p className="text-xl font-bold text-green-900">9,223M VNƒê</p>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <p className="text-sm text-purple-600 font-medium">T·ªïng th∆∞·ªüng</p>
                  <p className="text-xl font-bold text-purple-900">46M VNƒê</p>
                </div>
              </div>
              
              <div ref={bonusContainerRef} style={{ minHeight: '200px', width: '100%' }} />
            </CardContent>
          </Card>
        </TabsContent>

        {/* AGC Salary Tab */}
        <TabsContent value="agc-salary">
          <Card className="bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle>L∆Ø∆†NG D·ªäCH V·ª§ AGC</CardTitle>
              <CardDescription>B·∫£ng t√≠nh l∆∞∆°ng d·ªãch v·ª• AGC chi ti·∫øt</CardDescription>
            </CardHeader>
            <CardContent>
              {/* AGC Stats Card */}
              <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                <div className="flex justify-between items-center">
                  <div>
                    <p className="text-sm text-blue-600 font-medium">T·ªïng l∆∞∆°ng DV AGC th√°ng {selectedMonth}</p>
                    <p className="text-2xl font-bold text-blue-900">
                      {formatCurrency(mockAgcSalaryData.reduce((sum, emp) => sum + emp.agcSalary, 0))} VNƒê
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-600">S·ªë nh√¢n vi√™n: {mockAgcSalaryData.length}</p>
                    <p className="text-sm text-gray-600">T·ª∑ l·ªá trung b√¨nh: {(mockAgcSalaryData.reduce((sum, emp) => sum + emp.bonusPercentage, 0) / mockAgcSalaryData.length).toFixed(1)}%</p>
                  </div>
                </div>
              </div>
              
              <div ref={agcContainerRef} style={{ minHeight: '250px', width: '100%' }} />
              
              {/* AGC Notes */}
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">Ghi ch√∫:</p>
                <ul className="text-xs text-gray-500 space-y-1">
                  <li>‚Ä¢ L∆∞∆°ng DV AGC ƒë∆∞·ª£c t√≠nh theo t·ª∑ l·ªá % tr√™n doanh thu kh√°ch h√†ng</li>
                  <li>‚Ä¢ Doanh thu v√† t·ª∑ l·ªá c√≥ th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp tr√™n b·∫£ng</li>
                  <li>‚Ä¢ L∆∞∆°ng s·∫Ω t·ª± ƒë·ªông t√≠nh to√°n l·∫°i khi thay ƒë·ªïi doanh thu ho·∫∑c t·ª∑ l·ªá</li>
                  <li>‚Ä¢ S·ªë li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th√°ng/nƒÉm ƒë√£ ch·ªçn</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}